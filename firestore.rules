rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user is accessing their own document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Helper function to check if user is admin
    function isAdmin() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Users collection rules
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.uid;
      allow update: if isOwner(resource.data.uid) || isAdmin();
      allow delete: if isOwner(resource.data.uid) || isAdmin();
    }

    // Bookings collection rules
    match /bookings/{bookingId} {
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || 
        isAdmin()
      );
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || 
        isAdmin()
      );
      allow delete: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || 
        isAdmin()
      );
    }

    // Tournament participants rules
    match /tournament_participants/{participantId} {
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );
      allow delete: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );
    }

    // Support tickets rules
    match /support_tickets/{ticketId} {
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );
      allow delete: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );
    }

    // Tournaments
    match /tournaments/{tournamentId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Tournament registrations
    match /tournamentRegistrations/{registrationId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update, delete: if isAdmin();
    }

    // PlayStation consoles
    match /consoles/{consoleId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }

    // Payments collection
    match /payments/{paymentId} {
      allow read: if isAuthenticated() && (
        isAdmin() || 
        resource.data.userId == request.auth.uid
      );
      allow create: if isAuthenticated();
      allow update, delete: if isAdmin();
    }

    // Products collection
    match /products/{productId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }

    // Orders collection
    match /orders/{orderId} {
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || 
        isAdmin()
      );
      allow create: if isAuthenticated();
      allow update, delete: if isAdmin();
    }

    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 